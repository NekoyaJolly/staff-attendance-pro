version: '3.8'

services:
  # Main application services
  db:
    image: postgres:15
    container_name: timetracking_db
    environment:
      POSTGRES_DB: timetracking_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=ja_JP.UTF-8"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - backup_db:/var/backups/database
    networks:
      - timetracking_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  app:
    build: .
    container_name: timetracking_app
    environment:
      NODE_ENV: production
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: timetracking_db
      DB_USER: postgres
      DB_PASSWORD: ${DB_PASSWORD:-secure_password}
    volumes:
      - app_data:/app/data
      - backup_files:/var/backups/files
      - ./scripts:/app/scripts:ro
    depends_on:
      db:
        condition: service_healthy
    networks:
      - timetracking_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: timetracking_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx_logs:/var/log/nginx
      - ssl_certs:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - timetracking_network
    restart: unless-stopped

  # Backup and monitoring services
  backup_scheduler:
    image: alpine:latest
    container_name: timetracking_backup
    environment:
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
      NOTIFICATION_EMAIL: ${NOTIFICATION_EMAIL:-admin@company.com}
    volumes:
      - backup_db:/var/backups/database
      - backup_files:/var/backups/files
      - backup_logs:/var/log
      - ./scripts:/app/scripts:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - timetracking_network
    restart: unless-stopped
    command: >
      sh -c "
        apk add --no-cache dcron postgresql-client docker-cli bc curl &&
        crontab /app/scripts/backup-crontab &&
        crond -f -d 8
      "
    depends_on:
      - db
      - app

  backup_monitor:
    image: alpine:latest
    container_name: timetracking_backup_monitor
    environment:
      SLACK_WEBHOOK_URL: ${SLACK_WEBHOOK_URL}
      EMAIL_SMTP_SERVER: ${EMAIL_SMTP_SERVER}
      EMAIL_FROM: ${EMAIL_FROM}
      EMAIL_TO: ${EMAIL_TO}
    volumes:
      - backup_db:/var/backups/database:ro
      - backup_files:/var/backups/files:ro
      - backup_logs:/var/log:ro
      - monitoring_data:/app/monitoring
      - ./scripts:/app/scripts:ro
    networks:
      - timetracking_network
    restart: unless-stopped
    command: >
      sh -c "
        apk add --no-cache dcron bc curl jq &&
        echo '*/15 * * * * /app/scripts/backup-health-check.sh' | crontab - &&
        echo '0 8 * * * /app/scripts/backup-validation.sh' | crontab - &&
        crond -f -d 8
      "

  # Log aggregation
  fluentd:
    image: fluentd:latest
    container_name: timetracking_logs
    volumes:
      - backup_logs:/var/log/backup:ro
      - nginx_logs:/var/log/nginx:ro
      - ./monitoring/fluentd.conf:/fluentd/etc/fluent.conf:ro
    networks:
      - timetracking_network
    restart: unless-stopped

  # Metrics and monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: timetracking_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=90d'
      - '--web.enable-lifecycle'
    networks:
      - timetracking_network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: timetracking_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./monitoring/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
      - ./monitoring/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3001:3000"
    networks:
      - timetracking_network
    restart: unless-stopped

networks:
  timetracking_network:
    driver: bridge

volumes:
  db_data:
    driver: local
  app_data:
    driver: local
  backup_db:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/backups/timetracking/database
  backup_files:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/backups/timetracking/files
  backup_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/log
  nginx_logs:
    driver: local
  ssl_certs:
    driver: local
  monitoring_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local