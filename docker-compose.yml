version: '3.8'

services:
  # フロントエンド（本アプリケーション）
  frontend:
    build: .
    ports:
      - "80:80"
    environment:
      - NODE_ENV=production
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

  # バックエンドAPI（デモ用）
  backend:
    image: node:18-alpine
    working_dir: /app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://user:password@database:5432/attendance_db
    volumes:
      - ./backend:/app
    command: sh -c "npm install && npm start"
    depends_on:
      - database
    networks:
      - app-network
    restart: unless-stopped

  # データベース
  database:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=attendance_db
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - app-network
    restart: unless-stopped

  # Redis（セッション管理・キャッシュ用）
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped

  # 監視ツール（Prometheus）
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - app-network
    restart: unless-stopped

  # 監視ダッシュボード（Grafana）
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - app-network
    restart: unless-stopped

  # 自動バックアップシステム（保持ポリシー付き）
  backup:
    image: postgres:15
    profiles: ["backup"]
    depends_on:
      - database
    environment:
      - PGPASSWORD=password
      - BACKUP_RETENTION_DAYS=30
      - CRITICAL_RETENTION_YEARS=10
      - BACKUP_ALERT_EMAIL=admin@company.com
      - EMERGENCY_ALERT_EMAIL=emergency@company.com
      - DB_CONTAINER_NAME=timetracking_database
      - APP_CONTAINER_NAME=timetracking_frontend
    volumes:
      - ./scripts:/scripts
      - backup_data:/var/backups/timetracking
      - backup_archives:/var/archives/timetracking
      - backup_reports:/var/reports/backup-compliance
      - /var/run/docker.sock:/var/run/docker.sock
    command: >
      sh -c "
        echo 'Starting enhanced backup service with retention policies...' &&
        # Install required packages
        apt-get update && apt-get install -y cron bc jq mailutils logrotate curl &&
        # Set up backup retention system
        chmod +x /scripts/*.sh &&
        cd /scripts && ./install-backup-retention.sh &&
        # Start cron daemon
        service cron start &&
        echo 'Backup retention system started successfully' &&
        # Keep container running and monitor
        while true; do
          sleep 3600
          echo 'Backup service health check: $(date)'
        done
      "
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  backup_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/backups/timetracking
  backup_archives:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/archives/timetracking
  backup_reports:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/reports/backup-compliance

networks:
  app-network:
    driver: bridge